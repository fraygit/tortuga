@{
    ViewBag.Title = "DocumentEditor";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}
@model tortuga.MongoData.Entities.Model.DocumentSchema

<div class="row">
    <div class="col-md-12">
        <section class="panel">
            <header class="panel-heading sm">
                <h2>Document Builder </h2>
            </header>
            <div class="panel-body">
                <form role="form">
                    <div class="form-group">
                        <label>Document Name</label>
                        <input type="text" class="form-control" placeholder="Document Name" id="txtDocumentName">
                    </div>

                    <div id="navcontainer">
                        <ul class="root">
                            <li>
                                <div class="document-item">
                                    @Model.Name 
                                </div>
                                <div class="listPanel"></div>
                            </li>
                        </ul>
                    </div>

                    <button type="button" class="btn btn-primary" id="btn-AddField">Add a Field</button>

                </form>
            </div>

            <footer class="panel-footer">
                <button type="button" class="btn btn-primary" id="btn-save">Save Document</button>
                <button type="reset" class="btn">Cancel</button>
            </footer>
        </section>
    </div>
</div>

<div id="md-normal" class="modal fade" tabindex="-1" aria-hidden="true" style="display: none; margin-top: -63px;">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><i class="fa fa-times"></i></button>
        <h4 class="modal-title">Field Details</h4>
    </div>
    <!-- //modal-header-->
    <div class="modal-body">
        <form>
            <div id="FieldDetails" data-field-guid="" data-save-mode="update"></div>
            <div class="form-group">
                <label for="txtFieldName">Parent</label>
                <input lass="form-control" id="txtRoot" value="Root" disabled>
            </div>
            <div class="form-group">
                <label for="txtFieldName">Field Name</label>
                <input class="form-control" id="txtFieldName" placeholder="Field Name">
            </div>
            <div class="form-group">
                <label for="exampleInputPassword1">Data Type</label>
                <select class="form-control" id="dropDataType">
                    <option>String</option>
                    <option>Number</option>
                    <option>Date</option>
                    <option>Document</option>
                </select>
            </div>
            <button type="button" class="btn btn-primary" id="btnSaveField">Save</button>
        </form>
    </div>
    <!-- //modal-body-->
</div>


@section Scripts {
    <script language="javascript">
    var documentSchema = @Html.Raw(Json.Encode(Model));

        $(document).ready(function(){

            var defUpdateDocumentSchema;

            console.log('load initial');
            LoadFieldList(documentSchema);

            function LoadFieldList(documentSchemaToLoad){
                $(".listPanel").html('loading..');
                $.ajax({
                    url: '@Url.Action("ListFields", "Document")',
                    data: JSON.stringify(documentSchemaToLoad),
                    contentType: 'application/json',
                    type: 'POST',
                    dataType: 'HTML'
                }).success(function(result){
                    documentSchema = documentSchemaToLoad;
                    $(".listPanel").html(result);
                });
            }

            $("body").on("click", ".document-item a", function (e) {
                e.preventDefault();
                var parentField = $(this).data("parent-field");
                var isAddChildField = parentField != undefined || parentField != null;
               
                var fieldGuid =  isAddChildField ? parentField : $(this).data("document-guid");

                SearchField("Root", fieldGuid, documentSchema.Fields, function(field, rootName){

                    if (!isAddChildField){ // update existing field
                        $("#FieldDetails").data("save-mode", "update");
                        $("#txtFieldName").val(field.Name);
                        $("#txtRoot").val(rootName);

                        var selectedDataType = GetCurrentDataType(field);
                        $("#dropDataType").val(selectedDataType);
                    }
                    else{ // add child field of an existing document type
                        $("#FieldDetails").data("save-mode", "add-child-field");
                        $("#txtRoot").val(field.Name);
                        $("#txtFieldName").val("");
                    }
                    $("#FieldDetails").data("field-guid", field.FieldGuid);
                });           

                $("#md-normal").modal('show');
                return false;
            });

            $("body").on("click", "#btnSaveField", function(){
                var fieldGuid = $("#FieldDetails").data("field-guid");
                switch($("#FieldDetails").data("save-mode")){
                    case "update":
                        UpdateDocumentSchema (documentSchema.Fields, fieldGuid, false, function(newFields){
                            var newDocumentSchema = {Name : documentSchema.Name, Id: documentSchema.Id, Fields: newFields};
                            console.log('load update');
                            LoadFieldList(newDocumentSchema);
                        });
                        break;
                    case "add" : 
                        var newField = {Name : $("#txtFieldName").val(), DataType: GetDataType($("#dropDataType").val()), FieldGuid: generateUUID()};
                        documentSchema.Fields.push(newField);
                        LoadFieldList(documentSchema);
                        break;
                    case "add-child-field" :
                        UpdateDocumentSchema (documentSchema.Fields, fieldGuid, true, function(newFields){
                            var newDocumentSchema = {Name : documentSchema.Name, Id: documentSchema.Id, Fields: newFields};
                            console.log('load update');
                            LoadFieldList(newDocumentSchema);
                        });
                        break;
                }

                $("#md-normal").modal('hide');
                return false;
            });

            function GetDataType(type){
                var typeId = 0;
                switch(type){
                    case "String":
                        typeId = 0;
                        break;
                    case "Number":
                        typeId = 1;
                        break;
                    case "Date":
                        typeId = 2;
                        break;
                    case "Document":
                        typeId = 3;
                        break;
                }
                return typeId;
            }

            function generateUUID() {
                var d = new Date().getTime();
                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                    var r = (d + Math.random()*16)%16 | 0;
                    d = Math.floor(d/16);
                    return (c=='x' ? r : (r&0x3|0x8)).toString(16);
                });
                return uuid;
            };

            $("body").on("click", "#btn-AddField", function(){
                $("#FieldDetails").data("save-mode", "add");
                $("#txtFieldName").val('');
                $("#md-normal").modal('show');
                return false;
            });

            function GetCurrentDataType(field){
                var selectedDataType;
                switch(field.DataType){
                    case 0:
                        selectedDataType = "String";
                        break;
                    case 1:
                        selectedDataType = "Number";
                        break;
                    case 2:
                        selectedDataType = "Date";
                        break;
                    case 3:
                        selectedDataType = "Document";
                        break;
                }
                return selectedDataType;
            }

            function UpdateDocumentSchema (fields, fieldGuid, isAddChildField, callback){
                var newFields = [];
                $.each(fields, function(index, item){
                    if (item.FieldGuid == fieldGuid)
                    {
                        if (!isAddChildField){
                            item.Name = $("#txtFieldName").val();
                        }
                        else{
                            if (item.Fields == null || item.Fields == undefined){
                                item.Fields = [];
                            }
                            item.Fields.push({DataType:0, Name: $("#txtFieldName").val(), DataType: GetDataType($("#dropDataType").val()), FieldGuid: generateUUID()});
                        }
                    }
                    if (item.Fields != null){
                        UpdateDocumentSchema(item.Fields, fieldGuid, isAddChildField, function(newChildFields){
                            item.Fields = newChildFields;
                        });
                    }
                    newFields.push(item);
                });
                callback(newFields);
            }

            function SearchField(parentname, fieldGuid, fields, cb){
                var root = parentname;
                $.each(fields, function(index, item){
                    if (item.FieldGuid == fieldGuid)
                    {
                        cb(item, root);
                        return false;
                    }
                    if (item.Fields != null){
                        SearchField(item.Name, fieldGuid, item.Fields, function(d, pr){
                            cb(d, pr);
                            return false;
                        });
                    }

                });                
            }

        });

    </script>
    
}